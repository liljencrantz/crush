# A simple test to make sure that multiple commands
# can use a single pipe both for input and output.
crush:locale:set "en_US.UTF-8"

# Create the pipe
$pipe := ((table_input_stream value=$integer):pipe)

# Attach the input end to a bunch of seq commands
$input1 := (seq 100_000 | pipe:write | bg)
$input2 := (seq 100_000 | pipe:write | bg)
$input3 := (seq 100_000 | pipe:write | bg)
$input4 := (seq 100_000 | pipe:write | bg)

# Attach the output end to the sum command and
$sum_job_id1 := (pipe:read | sum | bg)
$sum_job_id2 := (pipe:read | sum | bg)
$sum_job_id3 := (pipe:read | sum | bg)
$sum_job_id4 := (pipe:read | sum | bg)

# Close the output and input, so that the input can actually
# reach EOF once the above invocations exit
$pipe:close

# Wait for the sum commands to finish
val ($sum_job_id1 | fg) + ($sum_job_id2 | fg) + ($sum_job_id3 | fg) + ($sum_job_id4 | fg)
