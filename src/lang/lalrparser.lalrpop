use crate::lang::ast::*;
use crate::lang::ast::node::*;
use crate::lang::ast::token::*;
use crate::lang::ast::lexer::*;
use crate::lang::ast::parameter_node::ParameterNode;
use crate::lang::ast::location::Location;
use crate::lang::ast::tracked_string::TrackedString;
use crate::lang::argument::SwitchStyle;

grammar<'input>(input: &'input str);

pub JobList: JobListNode = {
    Separators? <l:JobListWithoutSeparator> => l,
};

Separators: () = {
    Separator,
    Separators Separator,
};

JobListWithoutSeparator: JobListNode = {
    <l: @L> => JobListNode {jobs: vec![], location: Location::new(l, l)},
    <j: NonEmptyJobList> Separators? => j,
};


NonEmptyJobList: JobListNode = {
    <l: @L> <mut lst:NonEmptyJobList> Separators <j:Job> <r: @R> =>  {
        lst.jobs.push(j);
        lst.location = Location::new(l, r);
        lst
    },
    <l: @L> <j: Job> <r: @R> => JobListNode {jobs: vec![j], location: Location::new(l, r)},
};

Job: JobNode = {
    <l: @L> <c:Command> <r: @R> => JobNode{commands: vec![c], location: Location::new(l, r)},
    <l: @L> <mut j:Job> Pipe Separators? <c:Command> <r: @R> => {
        j.commands.push(c);
        j.location = Location::new(l, r);
        j
    }
};

ExprJobListWithoutSeparator: JobListNode = {
    <l: @L> => JobListNode {jobs: vec![], location: Location::new(l, l)},
    <j: ExprNonEmptyJobList> Separators? => j,
};

ExprNonEmptyJobList: JobListNode = {
    <l: @L> <mut lst:ExprNonEmptyJobList> Separators <j:Expr> <r: @R> =>  {
        lst.jobs.push(j.expression_to_job());
        lst.location = Location::new(l, r);
        lst
    },
    <l: @L> <j: Expr> <r: @R> => JobListNode {jobs: vec![j.expression_to_job()], location: Location::new(l, r)},
};

ExprJobList: JobListNode = {
    Separators? <l:ExprJobListWithoutSeparator> => l,
};

Expr: Box<Node> = {
    ExprAssignment,
    <j:Expr> Pipe <c:ExprAssignment> => {
        let mut jj = j.expression_to_job();
        jj.commands.push(c.expression_to_command());
        Box::from(Node::Substitution(jj))
    },
}

ExprAssignment: Box<Node> = {
    ExprLogical,
    <i: ExprItem> <op: Equals> <e: ExprAssignment> =>
        Box::from(Node::Assignment(i, SwitchStyle::None, "=".to_string(), e)),
    <i: ExprItem> <op: Declare> <e: ExprAssignment> =>
        Box::from(Node::Assignment(i, SwitchStyle::None, ":=".to_string(), e)),
}

ExprLogical: Box<Node> = {
    ExprComparison,
    <l: ExprLogical> <op: LogicalOperator> <c: ExprComparison> => operator(op, l, c),
}

ExprComparison: Box<Node> = {
    ExprTerm,
    <c: ExprComparison> <op: ComparisonOperator> <t: ExprTerm> =>operator(op, c, t),
}

ExprTerm: Box<Node> = {
    ExprFactor,
    <lt: ExprTerm> <t:Plus> <rt:ExprFactor> => operator_method("__add__", t, lt, rt),
    <lt: ExprTerm> <t:Minus> <rt:ExprFactor> => operator_method("__sub__", t, lt, rt),
    };

ExprFactor: Box<Node> = {
    ExprUnary,
    <l: @L> <lt:ExprFactor> <op:Star> <rt:ExprUnary> <r: @R> => {
        operator_method("__mul__", op, lt, rt)
    },
    <l: @L> <lt:ExprFactor> <op:Slash> <rt:ExprUnary> <r: @R> => {
        operator_method("__div__", op, lt, rt)
    },
}

ExprUnary: Box<Node> = {
    ExprItem,
    <op:Minus> <u: ExprUnary> => unary_operator_method("__neg__", op, u),
}

ExprOptFalseBody: Option<JobListNode> = {
    => None,
    Else Separators? BlockStart <false_body: ExprJobList> BlockEnd => Some(false_body),
}

ExprItem: Box<Node> = {
    ExprModeStart <e:Expr> SubEnd => e,
    SubStart <j:Job> SubEnd => Box::from(Node::Substitution(j)),
    <l: Identifier> => Node::identifier(l),
    <l: Regex> => Node::regex(l),
    <l:QuotedFile> => Node::file(l, true),
    <s:QuotedString> => Node::quoted_string(s),
    <i:Integer> => Node::integer(i),
    <f:Float> => Node::float(f),
    <e:Return> => Node::return_expr(e),
    <e:Break> => Node::break_expr(e),
    <e:Continue> => Node::continue_expr(e),
    <key:If> <condition:Expr> Separators? BlockStart <true_body: ExprJobList> BlockEnd <false_body: ExprOptFalseBody> => Node::if_expr(key, condition, true_body, false_body),
    <key:While> <condition:Expr> Separators? BlockStart <body: ExprJobList> BlockEnd => Node::while_expr(key, condition, body),
    <key:Loop> Separators? BlockStart <body: ExprJobList> BlockEnd => Node::loop_expr(key, body),
    <key:For> <id:Identifier> Equals <iter:Expr> Separators? BlockStart <body: ExprJobList> BlockEnd => Node::for_expr(key, id.into(), iter, body),
    <i: ExprItem> GetItemStart <e: Assignment> GetItemEnd => Box::from(Node::GetItem(i, e)),
    <i: ExprItem> MemberOperator <l: Identifier> => Box::from(Node::GetAttr(i, l.into())),
    <i: ExprItem> ExprModeStart <ov: ExprOptList> SubEnd => {
        let l = i.location();
        let mut v = match ov {
            Some(vv) => vv,
            None => vec![],
        };
                v.insert(0, *i);
                let c = CommandNode {
                    expressions: v,
                    location: l,
                };

                Box::from(Node::Substitution(
                    JobNode{
                        commands: vec![c],
                        location: l,
                    }
                ))
        },
    BlockStart Separators? <s: ExprSignature> <l: ExprJobListWithoutSeparator> BlockEnd => Box::from(Node::Closure(s, l)),
}

ExprOptList: Option<Vec<Node>> = {
    => None,
    <e: ExprList> => Some(e),
}

ExprList: Vec<Node> = {
    <e: ExprAssignment> => vec![*e],
    <mut l: ExprList> Separators <e: ExprAssignment> => {
        l.push(*e);
        l
    },
}

ExprSignature: Option<Vec<ParameterNode>> = {
    => None,
    Pipe Pipe Separators? => Some(vec![]),
    Pipe <s: ExprParameterList> Pipe Separators? => Some(s),
}

ExprParameterList: Vec<ParameterNode> = {
    ExprParameter => vec![<>],
    <mut l: ExprParameterList> Separators? <p: ExprParameter> => {l.push(p); l},
}

ExprParameter: ParameterNode = {
    <start: @L> <l: Identifier> <end: @R> <d: ExprDefault> => ParameterNode::parameter(l, None, d),

    <start: @L> <l: Identifier> <end: @R> MemberOperator <t: ExprItem> <d: Default> =>
        ParameterNode::parameter(l, Some(t), d),

    Unnamed <start: @L> <l: Identifier> <end: @R> => ParameterNode::unnamed(l),

    Named <start: @L> <l: Identifier> <end: @R> => ParameterNode::named(l),
}

ExprDefault: Option<Node> = {
    => None,
    Equals <l: ExprLogical> => Some(*l),
}


Command: CommandNode = {
    <start: @L> <a: Assignment> <end: @R> => CommandNode{expressions: vec![*a], location: Location::new(start, end)},
    <start: @L> <mut c: Command> <a:Assignment> <end: @R> =>
        {c.expressions.push(*a);
        c.location = c.location.union(Location::new(start, end));
        c
    }
}

Assignment: Box<Node> = {
    Logical,
    <i: Item> <op: AssignmentOperator> <e: Assignment> =>
        Box::from(Node::Assignment(i, SwitchStyle::None, String::from(op), e)),
}

Logical: Box<Node> = {
    Comparison,
    <l: Logical> <op: LogicalOperator> <c: Comparison> => operator(op, l, c),
}

Comparison: Box<Node> = {
    Unary,
    <c: Comparison> <op: ComparisonOperator> <t: Unary> =>operator(op, c, t),
}

Unary: Box<Node> = {
    Item,
    <op:Unnamed> <u: Unary> => Box::from(Node::Unary(TrackedString::new("@", op), u)),
    <op:Named>   <u: Unary> => Box::from(Node::Unary(TrackedString::new("@@", op), u)),
}

Signature: Option<Vec<ParameterNode>> = {
    => None,
    Pipe Pipe Separators? => Some(vec![]),
    Pipe <s: ParameterList> Pipe Separators? => Some(s),
}

ParameterList: Vec<ParameterNode> = {
    Parameter => vec![<>],
    <mut l: ParameterList> Separators? <p: Parameter> => {l.push(p); l},
}

Parameter: ParameterNode = {
    <start: @L> <l: Identifier> <end: @R> <d: Default> => ParameterNode::parameter(l, None, d),

    <start: @L> <l: Identifier> <end: @R> MemberOperator <t: Item> <d: Default> =>
        ParameterNode::parameter(l, Some(t), d),

    Unnamed <start: @L> <l: Identifier> <end: @R> => ParameterNode::unnamed(l),

    Named <start: @L> <l: Identifier> <end: @R> => ParameterNode::named(l),
}

Default: Option<Node> = {
    => None,
    Equals <l: Logical> => Some(*l),
}

Item: Box<Node> = {
    <l:String> => Node::unquoted_string(l),
    <l:File> => Node::file(l, false),
    <l:Glob> => Node::glob(l),
    <l:Identifier> => Node::identifier(l),
    <l:Regex> => Node::regex(l),
    <l:QuotedFile> => Node::file(l, true),
    <l:QuotedString> => Node::quoted_string(l),
    <l:Integer> => Node::integer(l),
    <l:Float> => Node::float(l),
    <l:Flag> => {
    let ts = TrackedString::from(l);
        Box::from(
            if ts.string.starts_with("--") {
                Node::Assignment(Node::unquoted_string(ts.slice_to_end(2)),
                SwitchStyle::Double,
                "=".to_string(),
                Box::from(Node::Identifier(TrackedString::new("true", ts.location()))))
            } else {
            Node::Assignment(Node::unquoted_string(ts.slice_to_end(1)),
            SwitchStyle::Single,
            "=".to_string(),
            Box::from(Node::Identifier(TrackedString::new("true", ts.location()))))
        })
    },
    <i: Item> GetItemStart <e: Assignment> GetItemEnd => Box::from(Node::GetItem(i, e)),
    <i: Item> MemberOperator <start: @L> <l: String> <end: @R> => Box::from(Node::GetAttr(i, TrackedString::from(l))),
    BlockStart Separators? <s: Signature> <l: JobListWithoutSeparator> BlockEnd => Box::from(Node::Closure(s, l)),
    SubStart <j:Job> SubEnd => Box::from(Node::Substitution(j)),
    <l: @L>ExprModeStart <e:Expr> SubEnd <r: @R> => Box::from(Node::Substitution(e.expression_to_job())),
}

AssignmentOperator: TrackedString = {
    <l:Equals> => TrackedString::new("=", l),
    <l:Declare> => TrackedString::new(":=", l),
}

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Token<'input> {
        LogicalOperator=> Token::LogicalOperator(<&'input str>, <Location>),
        UnaryOperator=> Token::UnaryOperator(<&'input str>, <Location>),
        MemberOperator => Token::MemberOperator(<Location>),
        Equals=> Token::Equals(<Location>),
        Declare=> Token::Declare(<Location>),
        ComparisonOperator=> Token::ComparisonOperator(<&'input str>, <Location>),
        Slash=> Token::Slash(<Location>),
        Star=> Token::Star(<Location>),
        Plus=> Token::Plus(<Location>),
        Minus=> Token::Minus(<Location>),
        QuotedString=> Token::QuotedString(<&'input str>, <Location>),
        String=> Token::String(<&'input str>, <Location>),
        File=> Token::File(<&'input str>, <Location>),
        Glob=> Token::Glob(<&'input str>, <Location>),
        Identifier=> Token::Identifier(<&'input str>, <Location>),
        Flag=> Token::Flag(<&'input str>, <Location>),
        QuotedFile=> Token::QuotedFile(<&'input str>, <Location>),
        Regex=> Token::Regex(<&'input str>, <Location>),
        Separator=> Token::Separator(<&'input str>, <Location>),
        Integer=> Token::Integer(<&'input str>, <Location>),
        Float=> Token::Float(<&'input str>, <Location>),
        SubStart=> Token::SubStart(<Location>),
        SubEnd=> Token::SubEnd(<Location>),
        BlockStart=> Token::BlockStart(<Location>),
        BlockEnd=> Token::BlockEnd(<Location>),
        GetItemStart=> Token::GetItemStart(<Location>),
        GetItemEnd=> Token::GetItemEnd(<Location>),
        Pipe=> Token::Pipe(<Location>),
        Unnamed=> Token::Unnamed(<Location>),
        Named=> Token::Named(<Location>),
        ExprModeStart=> Token::ExprModeStart(<Location>),
        For => Token::For(<Location>),
        While => Token::While(<Location>),
        Loop => Token::Loop(<Location>),
        If => Token::If(<Location>),
        Else => Token::Else(<Location>),
        Return => Token::Return(<Location>),
        Break => Token::Break(<Location>),
        Continue => Token::Continue(<Location>),
    }
}