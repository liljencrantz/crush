use crate::lang::ast::*;
use crate::lang::ast::parameter_node::ParameterNode;
use crate::lang::ast::location::Location;
use crate::lang::ast::tracked_string::TrackedString;
use crate::lang::argument::SwitchStyle;

grammar<'input>(input: &'input str);

pub JobList: JobListNode = {
    Separator? <l:JobListWithoutSeparator> => l,
};

JobListWithoutSeparator: JobListNode = {
    <l: @L> => JobListNode {jobs: vec![], location: Location::new(l, l)},
    <j: NonEmptyJobList> Separator? => j,
};

NonEmptyJobList: JobListNode = {
    <l: @L> <mut lst:NonEmptyJobList> Separator <j:Job> <r: @R> =>  {
        lst.jobs.push(j);
        lst.location = Location::new(l, r);
        lst
    },
    <l: @L> <j: Job> <r: @R> => JobListNode {jobs: vec![j], location: Location::new(l, r)},
};

Job: JobNode = {
    <l: @L> <c:Command> <r: @R> => JobNode{commands: vec![c], location: Location::new(l, r)},
    <l: @L> <mut j:Job> Pipe Separator? <c:Command> <r: @R> => {
        j.commands.push(c);
        j.location = Location::new(l, r);
        j
    }
};

Expr: Box<Node> = {
    <j:JobExpr> => j.to_node()
};

JobExpr: Box<JobNode> = {
    <c:AssignmentExpr> => {
        let l = c.location();
        Box::from(JobNode{
            commands: vec![c.to_command()],
            location: l,
        })
    },
    <mut j:JobExpr> Pipe <c:AssignmentExpr> => {
        j.commands.push(c.to_command());
        j
    },
}

AssignmentExpr: Box<Node> = {
    LogicalExpr,
    <i: ItemExpr> <op: Equals> <e: AssignmentExpr> =>
        Box::from(Node::Assignment(i, SwitchStyle::None, "=".to_string(), e)),
    <i: ItemExpr> <op: Declare> <e: AssignmentExpr> =>
        Box::from(Node::Assignment(i, SwitchStyle::None, ":=".to_string(), e)),
}

LogicalExpr: Box<Node> = {
    ComparisonExpr,
    <l: LogicalExpr> <op: LogicalOperator> <c: ComparisonExpr> => operator(op, l, c),
}

ComparisonExpr: Box<Node> = {
    CommandExpr,
    <c: ComparisonExpr> <op: ComparisonOperator> <t: CommandExpr> =>operator(op, c, t),
}

CommandExpr: Box<Node> = {
               <c:TermExpr> => c,
               <lt:TermExpr> <t:Plus> <rt:TermExpr> => {
                   operator_method("__add__", t, lt, rt)
               },
               <lt:TermExpr> <t:Minus> <rt:TermExpr> => {
                   operator_method("__sub__", t, lt, rt)
               },
           };

TermExpr: Box<Node> = {
    FactorExpr,
    <l: @L> <lt:FactorExpr> <op:Star> <rt:FactorExpr> <r: @R> => {
        operator_method("__mul__", op, lt, rt)
    },
    <l: @L> <lt:FactorExpr> <op:Slash> <rt:FactorExpr> <r: @R> => {
        operator_method("__div__", op, lt, rt)
    },
}

FactorExpr: Box<Node> = {
    UnaryExpr,
    SubStart <e:Expr> SubEnd => e,
}

UnaryExpr: Box<Node> = {
    ItemExpr,
    <op:Minus> <u: UnaryExpr> => unary_operator_method("__neg__", op, u),
}

ItemExpr: Box<Node> = {
    <l: Identifier> => Node::identifier(l),
    <l: Regex> => Node::regex(l),
    <l:QuotedFile> => Node::file(l, true),
    <s:QuotedString> => Node::string(s),
    <i:Integer> => Node::integer(i),
    <f:Float> => Node::float(f),
    <i: ItemExpr> GetItemStart <e: Assignment> GetItemEnd => Box::from(Node::GetItem(i, e)),
    <i: ItemExpr> MemberOperator <l: Identifier> => Box::from(Node::GetAttr(i, l.into())),
    <i: ItemExpr> ExprModeStart <mut v: OptExpressionList> SubEnd => {
        let l = i.location();
        v.insert(0, *i);
        let c = CommandNode {
            expressions: v,
            location: l,
        };

        Box::from(Node::Substitution(
            JobNode{
                commands: vec![c],
                location: l,
            }
        ))
        },
}

OptExpressionList: Vec<Node> = {
    => vec![],
    ExpressionList,
}

ExpressionList: Vec<Node> = {
    <e: Expr> => vec![*e],
    <mut l: ExpressionList> Separator <e: Expr> => {
        l.push(*e);
        l
    },
}

Command: CommandNode = {
    <start: @L> <a: Assignment> <end: @R> => CommandNode{expressions: vec![*a], location: Location::new(start, end)},
    <start: @L> <mut c: Command> <a:Assignment> <end: @R> =>
        {c.expressions.push(*a);
        c.location = c.location.union(Location::new(start, end));
        c
    }
}

Assignment: Box<Node> = {
    Logical,
    <i: Item> <op: AssignmentOperator> <e: Assignment> =>
        Box::from(Node::Assignment(i, SwitchStyle::None, String::from(op), e)),
}

Logical: Box<Node> = {
    Comparison,
    <l: Logical> <op: LogicalOperator> <c: Comparison> => operator(op, l, c),
}

Comparison: Box<Node> = {
    Unary,
    <c: Comparison> <op: ComparisonOperator> <t: Unary> =>operator(op, c, t),
}

Unary: Box<Node> = {
    Item,
    <op:Unnamed> <u: Unary> => Box::from(Node::Unary(TrackedString::new("@", op), u)),
    <op:Named>   <u: Unary> => Box::from(Node::Unary(TrackedString::new("@@", op), u)),
}

Signature: Option<Vec<ParameterNode>> = {
    => None,
    Pipe Pipe Separator? => Some(vec![]),
    Pipe <s: ParameterList> Pipe Separator? => Some(s),
}

ParameterList: Vec<ParameterNode> = {
    Parameter => vec![<>],
    <mut l: ParameterList> Separator? <p: Parameter> => {l.push(p); l},
}

Parameter: ParameterNode = {
    <start: @L> <l: Identifier> <end: @R> <d: Default> =>
    ParameterNode::parameter(l, None, d),

    <start: @L> <l: Identifier> <end: @R> MemberOperator <t: Item> <d: Default> =>
        ParameterNode::parameter(l, Some(t), d),

    Unnamed <start: @L> <l: Identifier> <end: @R> => ParameterNode::unnamed(l),

    Named <start: @L> <l: Identifier> <end: @R> => ParameterNode::named(l),
}

Default: Option<Node> = {
    => None,
    Equals <l: Logical> => Some(*l),
}

Item: Box<Node> = {
    <l: StringOrGlob> => Node::parse_symbol_or_glob(l),
    <l: Identifier> => Node::identifier(l),
    <l: Regex> => Node::regex(l),
    <l: FileOrGlob> => Node::parse_file_or_glob(l),
    <l:QuotedFile> => Node::file(l, true),
    <l:QuotedString> => Node::string(l),
    <l:Integer> => Node::integer(l),
    <l:Float> => Node::float(l),

    <l:Flag> => {
    let ts = TrackedString::from(l);
        Box::from(
            if ts.string.starts_with("--") {
                Node::Assignment(Box::from(Node::Symbol(ts.slice_to_end(2))),
                SwitchStyle::Double,
                "=".to_string(),
                Box::from(Node::Identifier(TrackedString::new("true", ts.location()))))
            } else {
            Node::Assignment(Box::from(Node::Symbol(ts.slice_to_end(1))),
            SwitchStyle::Single,
            "=".to_string(),
            Box::from(Node::Identifier(TrackedString::new("true", ts.location()))))
})
},
    <i: Item> GetItemStart <e: Assignment> GetItemEnd => Box::from(Node::GetItem(i, e)),
    <i: Item> MemberOperator <start: @L> <l: StringOrGlob> <end: @R> => Box::from(Node::GetAttr(i, TrackedString::from(l))),
    JobStart Separator? <s: Signature> <l: JobListWithoutSeparator> JobEnd => Box::from(Node::Closure(s, l)),
    SubStart <j:Job> SubEnd => Box::from(Node::Substitution(j)),
    <l: @L>ExprModeStart <e:Expr> SubEnd <r: @R> => Box::from(
        Node::Substitution(
            JobNode{
                commands: vec![
                    CommandNode{
                        expressions: vec![*e],
                        location: Location::new(l, r)
                    }],
                location: Location::new(l, r)})),
}

AssignmentOperator: TrackedString = {
    <l:Equals> => TrackedString::new("=", l),
    <l:Declare> => TrackedString::new(":=", l),
}

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Token<'input> {
        LogicalOperator=> Token::LogicalOperator(<&'input str>, <Location>),
        UnaryOperator=> Token::UnaryOperator(<&'input str>, <Location>),
        MemberOperator => Token::MemberOperator(<Location>),
        Equals=> Token::Equals(<Location>),
        Declare=> Token::Declare(<Location>),
        ComparisonOperator=> Token::ComparisonOperator(<&'input str>, <Location>),
        Slash=> Token::Slash(<Location>),
        Star=> Token::Star(<Location>),
        Plus=> Token::Plus(<Location>),
        Minus=> Token::Minus(<Location>),
        QuotedString=> Token::QuotedString(<&'input str>, <Location>),
        StringOrGlob=> Token::StringOrGlob(<&'input str>, <Location>),
        Identifier=> Token::Identifier(<&'input str>, <Location>),
        Flag=> Token::Flag(<&'input str>, <Location>),
        QuotedFile=> Token::QuotedFile(<&'input str>, <Location>),
        FileOrGlob=> Token::FileOrGlob(<&'input str>, <Location>),
        Regex=> Token::Regex(<&'input str>, <Location>),
        Separator=> Token::Separator(<&'input str>, <Location>),
        Integer=> Token::Integer(<&'input str>, <Location>),
        Float=> Token::Float(<&'input str>, <Location>),
        SubStart=> Token::SubStart(<Location>),
        SubEnd=> Token::SubEnd(<Location>),
        JobStart=> Token::JobStart(<Location>),
        JobEnd=> Token::JobEnd(<Location>),
        GetItemStart=> Token::GetItemStart(<Location>),
        GetItemEnd=> Token::GetItemEnd(<Location>),
        Pipe=> Token::Pipe(<Location>),
        Unnamed=> Token::Unnamed(<Location>),
        Named=> Token::Named(<Location>),
        ExprModeStart=> Token::ExprModeStart(<Location>),
    }
}